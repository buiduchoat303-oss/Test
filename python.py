# ===================== KHUNG CHAT H·ªéI ‚Äì ƒê√ÅP V·ªöI GEMINI (TH√äM M·ªöI) =====================
st.divider()
st.subheader("üí¨ Khung chat h·ªèi ‚Äì ƒë√°p v·ªõi Gemini")

# --- Sidebar: nh·∫≠p API key (fallback n·∫øu ch∆∞a c√≥ trong Secrets) ---
with st.sidebar:
    st.markdown("### üîë Gemini API Key")
    st.caption("N·∫øu b·∫°n ƒë√£ c·∫•u h√¨nh `GEMINI_API_KEY` trong Secrets th√¨ c√≥ th·ªÉ b·ªè qua √¥ n√†y.")
    api_key_chat_input = st.text_input("Nh·∫≠p GEMINI_API_KEY (·∫©n)", type="password")

# L·∫•y API key: ∆∞u ti√™n Secrets, sau ƒë√≥ ƒë·∫øn input b√™n sidebar
# (Kh√¥ng s·ª≠a m√£ c≈©: ch·ªâ b·ªï sung c√°ch l·∫•y key cho khung chat m·ªõi)
api_key_chat = st.secrets.get("GEMINI_API_KEY") or api_key_chat_input

# L∆∞u l·ªãch s·ª≠ chat trong session_state
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []  # [{'role': 'user'|'assistant', 'content': '...'}]

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for msg in st.session_state.chat_history:
    with st.chat_message("user" if msg["role"] == "user" else "assistant"):
        st.markdown(msg["content"])

# Tu·ª≥ ch·ªçn ƒë√≠nh k√®m ng·ªØ c·∫£nh b·∫£ng ph√¢n t√≠ch hi·ªán t·∫°i
attach_ctx = st.checkbox("üìé ƒê√≠nh k√®m b·∫£ng ph√¢n t√≠ch hi·ªán t·∫°i v√†o c√¢u h·ªèi (n·∫øu c√≥)", value=False)

# H√†m chuy·ªÉn l·ªãch s·ª≠ chat sang ƒë·ªãnh d·∫°ng Gemini
def _to_gemini_contents(history, system_hint=None):
    """
    Chuy·ªÉn [{'role':'user'|'assistant','content':str}, ...]
    -> contents cho Gemini: [{'role':'user'|'model','parts':[str]}, ...]
    """
    contents = []
    if system_hint:
        contents.append({"role": "user", "parts": [system_hint]})  # ƒë∆∞a system hint nh∆∞ 1 user-msg ƒë·∫ßu
    for m in history:
        role = "user" if m["role"] == "user" else "model"
        contents.append({"role": role, "parts": [m["content"]]})
    return contents

# √î nh·∫≠p chat
user_question = st.chat_input("Nh·∫≠p c√¢u h·ªèi v·ªÅ t√†i ch√≠nh/k·∫ø to√°n/doanh nghi·ªáp...")

# N√∫t xo√° l·ªãch s·ª≠ chat
col_reset, _ = st.columns([1, 9])
with col_reset:
    if st.button("üóëÔ∏è Xo√° l·ªãch s·ª≠ chat"):
        st.session_state.chat_history = []
        st.rerun()

if user_question:
    # Gh√©p ng·ªØ c·∫£nh b·∫£ng ph√¢n t√≠ch (n·∫øu c√≥ v√† ƒë∆∞·ª£c ch·ªçn)
    composed_question = user_question
    if attach_ctx and "df_processed" in locals():
        try:
            # Gi·ªõi h·∫°n 30 d√≤ng ƒë·ªÉ tr√°nh prompt qu√° l·ªõn
            preview_md = df_processed.head(30).to_markdown(index=False)
            composed_question += (
                "\n\n[Ng·ªØ c·∫£nh b·∫£ng ph√¢n t√≠ch hi·ªán t·∫°i (t·ªëi ƒëa 30 d√≤ng)]\n" + preview_md
            )
        except Exception:
            pass

    # L∆∞u & hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
    st.session_state.chat_history.append({"role": "user", "content": composed_question})
    with st.chat_message("user"):
        st.markdown(composed_question)

    # G·ªçi Gemini tr·∫£ l·ªùi
    with st.chat_message("assistant"):
        if not api_key_chat:
            st.error("Ch∆∞a c√≥ GEMINI_API_KEY. H√£y c·∫•u h√¨nh trong Secrets ho·∫∑c nh·∫≠p ·ªü Sidebar.")
        else:
            try:
                client = genai.Client(api_key=api_key_chat)
                model_name = "gemini-2.5-flash"

                system_hint = (
                    "B·∫°n l√† tr·ª£ l√Ω AI chuy√™n ph√¢n t√≠ch t√†i ch√≠nh. "
                    "Tr·∫£ l·ªùi ng·∫Øn g·ªçn, c√≥ l·∫≠p lu·∫≠n v√† tr√≠ch s·ªë li·ªáu khi c·∫ßn. "
                    "N·∫øu thi·∫øu d·ªØ li·ªáu, h√£y n√™u gi·∫£ ƒë·ªãnh r√µ r√†ng."
                )

                gemini_contents = _to_gemini_contents(
                    st.session_state.chat_history, system_hint=system_hint
                )

                with st.spinner("Gemini ƒëang so·∫°n tr·∫£ l·ªùi..."):
                    resp = client.models.generate_content(
                        model=model_name,
                        contents=gemini_contents
                    )
                    answer = getattr(resp, "text", None) or "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c n·ªôi dung ph·∫£n h·ªìi t·ª´ Gemini."

                st.markdown(answer)
                st.session_state.chat_history.append({"role": "assistant", "content": answer})

            except APIError as e:
                st.error(f"L·ªói g·ªçi Gemini API: {e}")
            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh khi chat: {e}")
# ================== H·∫æT KHUNG CHAT H·ªéI ‚Äì ƒê√ÅP V·ªöI GEMINI (TH√äM M·ªöI) ====================
